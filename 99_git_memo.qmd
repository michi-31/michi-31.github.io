---
date: "2024-09-29"
execute: 
  eval: false
  cache: true
format:
  html: 
    slide-level: 2
    toc: true
---
# 目的
ここでは、GitHubの基本的な使い方を整理する。

### 目次

1. [GitHubの基礎知識](#1-GitHubの基礎知識)
2. [管理の流れ](#2-管理の流れ)
3. [Gitの準備](#3-Gitの準備)
4. [バージョン管理](#4-バージョン管理)
- [補足「.md」と「.qmd」](#-ファイル)  
- [参考文献](#-参考文献)

## 1.GitHubの基礎知識{#1-GitHubの基礎知識}
### GitHubの目的
- GitHubとは、Gitの仕組みを使ったWebサービスのこと。
- GitHubはLinuxカーネルのソースコード管理システムとして2005年に誕生した「Git」をWebサービス化したもの。
- GitHubを使うことで、`ファイルのバージョン管理を簡単に行うことができる！

### バージョン管理
- ファイルをアップデートするにつれてファイルの状態が状態が変化することを「バージョン」といい、同じファイルの複数のバージョンを保持することを「バージョン管理」`という。   
- バージョン管理により、変更を記録した地点同士を自由に行き来することができる。 

### コミット
- コミットとは、ユーザが任意のタイミングで記録を保存する操作のこと。
- コミットのタイミングは、プログラムに対する機能追加や変更などの単位を目安とする。

### リポジトリ
- リポジトリとは、コミットを貯める場所（保管庫）のこと。
- Gitはフォルダ単位で管理するため、フォルダ内のすべてのファイルが管理対象となり、コミットすることでリポジトリに記録される。
- リポジトリを用意する方法には、途中参加（既存のリポジトリをコピー（クローン））と新規立ち上げ（リポジトリを新規作成）の２つがある。
 
- リポジトリには、ローカルリポジトリとリモートリポジトリの２つがある。
1. ローカルリポジトリ: PCのローカル環境に作成する自分専用のリポジトリ
2. リモートリポジトリ: ネットワーク上に作成するリモートリポジトリ（複数人で共有するものとしてサーバ上に配備することが一般的）

## 2.管理の流れ{#2-管理の流れ}
GitHubでは、次の３つの場所を使ってバージョン管理を行う。

- ワークツリー（ワーキングツリー、作業ディレクトリ）
- ステージングエリア
- Gitディレクトリ

### ワークツリー
ワークツリーは、変更するファイルを保持する場所。  
Gitが保持している複数のコミットのうち、編集の開始地点となるもの。

- Git管理外
  - 新規追加したファイル：untracked（追跡なし）  
  - 新規追加したファイルは、一度もコミットされていない状態のため、G管理対象外となる。 
- Git管理内
  - 編集したファイル：unmodified（変更なし）,  modified（変更済み）
  
### ステージングエリア
ステージングエリアは、ワークツリーでファイル編集を行ったあと、コミットする内容を一度登録する場所。

- ファイルの状態:
  - modified→staged（ステージングエリアに追加済み）
  - untracked→staged
  
### Gitディレクトリ
Gitディレクトリは、コミットを格納する場所。  
ステージングエリアに登録したファイルが、それ以降変更が入らないデータとして格納される。

- ファイルの状態: 
  - staged→（コミット）→unmodified

### 「Gitクライアント」と「Gitサーバ」
- Gitクライアント
  - PCにインストールして「ローカルリポジトリを作る」、「コミットする」、「リモートリポジトリへコミットを反映する」などのGit操作を行うもの。
  - CUI（Character User Interface）クライアントとGUI（GGraphical User Interface）クライアントの２種類がある。
- Gitサーバ
  - リモートリポジトリを操作するソフトウェアのこと。

## 3.Gitの準備{#3-Gitの準備}
### Gitのインストールと操作
- 以下のサイトを参考にGitHubをインストールする。  
[GitHubの導入〜基本操作 for Windows](https://qiita.com/Kenta-Okuda/items/c3dcd60a80a82147e1bf)

- CUIからコマンドを実行して操作する
コマンドの書き方
```bash
＄ ls -a Documents
```
$： プロンプト、a： オプション、Documents： パラメータ  
※ オプションやパラメータは省略することもある。

### ディレクトリの操作
ディレクトリの位置を表す「パス」

- 絶対パス： ルートディレクトリを起点としたパス
- 相対パス： カレントディレクトリを起点としたパス

- ディレクトリの記法
  - カレントディレクトリ：「.」
  - ホームディレクトリ：「_」
  - ルートディレクトリ：「/」
 
- ディレクトリを操作するコマンド
  - pwd： カレントディレクトリの絶対パス
```bash
pwd
```
- mkdir： 新しいディレクトリを作る
```bash
mkdir "新しいディレクトリ"
```
- lsオプション： カレントディレクトリの内容を確認する
```bash
ls
```
```bash
ls "検索対象のディレクトリ"
```
- 「-a」オプション： lsでは見れなかったディレクトリなどが表示される
```bash
ls -a
```
- cd：カレントディレクトリを移動する
```bash
cd "移動先のディレクトリ"
```

### Gitの設定
Windowsでは、Windows版Gitに属するCUIツール=GitBash（ギットバッシュ）を使って操作するのが便利！　※macOSでは、GitBashを使わなくてもターミナルで操作可能  

- ユーザネームの設定
```bash
git config --global user.name "ユーザネーム"
```
- メールアドレスの設定
```bash
git config --global user.email="メールアドレス"
```
- 設定値を確認
```bash
 git config --list 
```
- vscodeの設定　※ vscodeインストール時に"code"という名称でPATHに登録
```bash
git config --global core.editor "code --wait"
```
- 設定値を確認
```bash
git config core.editor
```

## 4.バージョン管理{#4-バージョン管理}
### 1.ローカルリポジトリの作成
- ローカルリポジトリの作成
```bash
git init
```
- ローカルリポジトリの設定（リモートリポジトリの追加）
```bash
git remote add origin <リモートリポジトリのURL>
```

### 2.ステージング
- 特定のファイルをステージングエリアに登録
```bash
git add "ファイル名"
```
- すべてのファイルをステージングエリアに登録
```bash
git add .
```
- 意図的に削除したファイルをステージングエリアに登録
```bash
git add -u
```

### 3.コミット
- 「-m」オプションを付けると、コマンドラインから直接メッセージを指定
```bash
git commit -m "コメント"
```

### 4.状態の確認
- ローカルリポジトリの状態を確認
```bash
git status
```
- 各エリアの差分を確認
```bash
git diff
```
- ステージングエリアとGitディレクトリの差分を確認
```bash
git diff --catched
``` 
- コミット履歴を確認
```bash
git log
```
- ディレクトリ、ファイルの削除
```bash
git rm "ディレクトリ or ファイル名"
```

### 5.状態の復元 
- ワークツリーの変更を取り消す
```bash
git checkout
```
```bash
git checkout -- "ファイル名"
```
- ステージングエリアに追加した変更をワークツリーに戻す
```bash
git reset
```
```bash
git reset HEAD "ファイル名"
```
- ファイルを削除する
```bash
git rm <ファイル名>
``` 

### 5.リモートリポジトリとの連携
- リモートリポジトリへプッシュ
```bash
git push origin master
```
- リモートリポジトリの確認
```bash
git remote -v
```
- リモートリポジトリの変更を取得
```bash
git fetch
```

## 補足「.mdファイル」とは？{#-ファイル}
  - Markdown形式で 書かれたテキストファイルのこと。
  - Markdown  
  プレーンテキストで書かれた文書に簡単な書式設定を施す軽量マークアップ言語。HTMLやPDFへの変換が容易だが、機能は限定されている。
 - Quarto  
  Mardownを基盤にしたツールでRやPythonなどのコードを埋め込み、実行結果を文書に反映することができる。


# 参考文献{#-参考文献}
- いちばんやさしいGit&GitHubの教本 第2版 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ  
[Amazonでこの本を見る](https://www.amazon.co.jp/%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84Git-GitHub%E3%81%AE%E6%95%99%E6%9C%AC-%E7%AC%AC2%E7%89%88-%E4%BA%BA%E6%B0%97%E8%AC%9B%E5%B8%AB%E3%81%8C%E6%95%99%E3%81%88%E3%82%8B%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%EF%BC%86%E5%85%B1%E6%9C%89%E5%85%A5%E9%96%80-%E3%80%8C%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E6%95%99%E6%9C%AC%E3%80%8D%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B09X6MF3RW/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=IUVZJLLEGCT0&dib=eyJ2IjoiMSJ9.H7Z3QLgGeYPK3mvg9hzimLevSupcvgCysQp2ufr23VysC70a8TBswmJM69fMmlUfxEMIQ6km870p0C26a3pOnaVG53UArgbfUbyLspCNIwb3TKwL83sMrPz8bol5HeVrr5l3bpeOS591GphSIczKEAMKIaR3LZFS72C0bMB-6rynxmDnj1DIVyFeulKmM-Al87J-HkY5UbsFsdpDZoV0_cJKkMVRlf3MA7G-fGWx4MK7D5NGQB8XXm9sbbkW-SxL-EyuTts1OhFbGFPXUqmXfvqr2hLf_YA0v54acJuwixY.sx4EyUPlEnO7feBT3yskCSNnVUqJWDhq7n6f5n8EDnE&dib_tag=se&keywords=%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84git&qid=1727598481&sprefix=%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84git%2Caps%2C260&sr=8-1)
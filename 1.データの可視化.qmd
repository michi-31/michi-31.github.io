---
title: "1.データの可視化"
date: "2024-09-29"
execute: 
  error: true
  cache: true
format:
  html: 
    slide-level: 2
    toc: true
---
# 目的
Rのデータ可視化パッケージ、ggplot2を用いてデータを可視化します。

# 1.はじめに
### 必要なパッケージをロード
以下の３つのパッケージをロードします。

- tidyverse:  
  ggplot2やdplyrなどのデータ分析や可視化を行うためのパッケージ群の集合体
- palmerpenguins:  
  南極のパーマーランドの３つの島に生息するペンギンの身体の測定値に関するデータ（penguins）を提供するパッケージ
- ggthems:  
  色覚以上に配慮したカラーパレットを提供するパッケージ
```{r}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```


# 2.第１ステップ
### データフレームの確認
以下の関数を用いて、データフレームの内容を確認します。

- glimpse(): 全ての変数と各変数の最初のいくつかの観測地を表示
- View(): スクロールやフィルタリングができるインタラクティブなデータビューアを表示
```{r}
glimpse(penguins)
#View(penguins)
```

### ggplot2の組み立て
ggplot2では、ggplot()関数を用いてプロットを始め、プロットオブジェクトを定義してから「レイヤ」を追加します。  

ggplot()の第１引数はデータセット、第２引数はmapping引数です。  
なお、mapping引数は常にaes()関数で定義され、aes()にて軸の設定などを行います。

mapping引数を定義しないと空のキャンバスが表示されます。
```{r}
ggplot(data = penguins)
```
mapping引数を定義して、aes()関数でｘ軸とｙ軸を指定します。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g) # 軸を指定
  )
```
geom_point()関数で点のレイヤをプロットに追加します。

（参考）プロットが使用する幾何オブジェクトの種類

- geom_point(): 散布図
- geom_bar(): 棒グラフ
- geom_line(): 折れ線グラフ
- geom_boxplot(): 箱ひげ図

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, body_mass_g)
) + 
  geom_point() # 散布図を設定
```
aes()関数内のエステティックマッピングにcolor = speciesを追加してペンギンの種類ごとの色分けを行います。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm,
                y = body_mass_g,
                color = species)  # ペンギンの種類ごとの色分けを設定
) +
 geom_point()
```

### ペンギンの種類ごとに直線を引く
散布図にもう一つレイヤを追加して体重とフリッパーの関係を示す滑らかなカーブを設定します。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm,
                y = body_mass_g, 
                color = species) 
) +
 geom_point() + 
 geom_smooth(method = "lm") # "lm":linear-modelにフィットした線を描画するレイアを追加
```

### ラベルの改善
colorに加えてshapeをエステティックにマッピングして、ペンギンの種類ごと異なる形を使用します。  

また、labs()関数でプロットラベルにタイトルなどを指定し、scale_color_colorblind()関数でカラーパレットを色覚異常に対応した改善を行います。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
 geom_point(mapping = aes(color = species, shape = species)) + # shape引数でペンギンの種類ごと異なる形を使用
 geom_smooth(method = "lm") +
 labs( # プロットラベルにタイトルなどを指定
  title = "Body mass and flipper length",
  subtitle = "Dimentions for Adelie, Chinstrap, and Gentoo Penguins",
  x = "Flipper length(mm)", y = "Body mass(g)",
  colort = "Species", shape = "Species"
 ) + 
 scale_color_colorblind() # カラーパレットを色覚異常に対応
```

# 練習問題
### 1.penguinsの行列を求める
344行、８列
```{r}
glimpse(penguins)
```
### 2.bill_depth_mmの意味を調べる
Culmen Depth  
a number denoting the depth of the dorsal ridge of a bird's bill (millimeters)  
→くちばしの深さ
```{r}
#??penguins
```
### 3.bill_depth_mmとbill_length_mmの散布図を作成
くちばしの長さと深さは種類によって異なる傾向がある。全体としては、くちばしの深さが増加すると長さが減少する負の相関関係が見れれる。  
これは、ペンギンの種が異なる環境や食性に応じて異なる形態的特徴を持っていることを反映している可能性が考えられる。
```{r}
ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm)) +
  geom_point(aes(color = species, shape = species)) + 
  geom_smooth(method = "lm") + 
  labs(
    title = "Bill depth and Bill length",
    x = "Bill length(mm)", y = "Bill depth(mm)",
    color = "Species", shape = "Species"
  ) + 
  scale_color_colorblind()
```
### 4.speciesとbill_depth_mmの散布図を作成
くちばしの深さの中央値は種類ごと異なる。AdelleとChinstrapに比べてGentooが短い傾向がある。
```{r}
ggplot(penguins, aes(x = species, y = bill_depth_mm)) +
  geom_boxplot() +  
  labs(title = "Species and Bill depth",
       x = "Species", y = "Bill depth(mm)")  
```
### 5.エラー解析
ggplot()のmapping引数でx,y軸が定義されていないため、散布図が作成できず、エラーが生じる。
ggplot(data = penguins) +  
 geom_point()

### 6.geom_point()の引数na.rmの意味と挙動
- na.rm = FALSE（デフォルト）:  
欠損値がある場合、プロットがエラーになる。例えば、x または y のいずれかに NA が含まれていると、データが描画されない。
- na.rm = TRUE:  
欠損値を無視し、プロットを生成する。この場合、NA のデータポイントは除外され、他のデータポイントのみが描画される。
```{r}
# NAを含むデータを使った散布図
ggplot(penguins, aes(x = flipper_length_mm,　　　　　　　　　　　 y = body_mass_g)) +
  geom_point(na.rm = TRUE)  # NAを無視してプロット
```
### 7.キャプションの追加
```{r}
ggplot(penguins, aes(x = flipper_length_mm,
　　　　　　　　　　　 y = body_mass_g)) +
  geom_point(na.rm = TRUE) + 
  labs(
    title = "データはpalmerpenguinsより。"
  )
```

### 8.グラフの作成
```{r}
ggplot(penguins, aes(x = flipper_length_mm,
                     y = body_mass_g)) + 
  geom_point(aes(color = bill_depth_mm)) + 
  geom_smooth(method = "loess") 
```

### 9.コードの出力予測
- se = TRUE（デフォルト）:  
スムージング線の周りに、信頼区間を示すバンドが描画される。これにより、モデルの不確実性を視覚的に理解しやすくなる。

- se = FALSE:  
信頼区間を描画せず、スムージング線のみを表示する。これにより、グラフがすっきりとし、視覚的に簡潔になるが、モデルの不確実性に関する情報は失われる。
```{r}
ggplot(penguins, aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = island)) + 
  geom_point() + 
  geom_smooth(se = FALSE)
```
### 10.実行結果の説明
エステティックマッピングの定義域が異なるだけで、結果は同じになる。


# 3.ggplot2の呼び出し
- ggplot2の最初の２つの引数はdataとmapping。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) + 
  geom_point()
```
- 省略して簡潔に書き直す。
```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```
- パイプ|>を使って書き直す。
```{r}
penguins |>
 ggplot(aes(x = flipper_length_mm, y = body_mass_g)) + 
 geom_point()
```


# 4.分布の可視化
## 1.カテゴリ変数の表示
- geom_bar(): カテゴリ変数の分布を棒グラフで表示する。  
- 変数をファクタに変換し、度数に基づいて並び替える。
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) + 
  geom_bar()
```

### 2.ヒストグラム
- geom_histogram(): ヒストグラムを表示する。
- binwidth引数でヒストグラムの間隔の幅を設定する。
```{r}
ggplot(penguins, aes(x = body_mass_g)) + 
  geom_histogram(binwidth = 200)
```
- geom_density(): ヒストグラムを平準化した密度プロットを表示する。
```{r}
ggplot(penguins, aes(x = body_mass_g)) + 
  geom_density()
```

# 練習問題
## 1.speciesの棒グラフを作成
x = speciesの場合
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```
y = speciesの場合
```{r}
ggplot(penguins, aes(y = fct_infreq(species))) +
  geom_bar()
```

## 2.2つの棒グラフの違いを確認
- geom_bar(color = "red"): 棒グラフの縁取りを赤で表示
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) + 
  geom_bar(color = "red")
```
- geom_bar(fill = "red"): 棒グラフの塗りつぶしを赤で表示
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) + 
  geom_bar(fill = "red")
```

### 3.geom_histogram()のbins引数の意味
bins引数は、ヒストグラムの感覚の幅を調整する。

### 4.diamondsデータセットのcarat変数のヒストグラムを作成
```{r}
ggplot(diamonds, aes(x = carat)) + 
  geom_histogram(binwidth = 0.5)
```


# 5.関係の可視化
## 箱ひげ図でデータを可視化
- geom_boxplot(): 箱ひげ図を作成する。
```{r}
ggplot(penguins, aes(x = species, y = body_mass_g)) + 
  geom_boxplot()
```
- geom_densityt(): 密度プロットを作成する。
- linewidth引数で線の太さを調整する。
```{r}
ggplot(penguins, aes(x = body_mass_g,
                     color = species)) + 
  geom_density(linewidth = 0.75)
```
- speciesをcolorとfillでエステティックにマッピングする。
- alpha引数で透過性を追加する。
```{r}
ggplot(penguins, aes(x = body_mass_g,
                     color = species,
                     fill = species)) + 
  geom_density(alpha = 0.5)
```

## 積み上げ図で変数間の関係を可視化
```{r}
ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar()
```
- position = "fill"で相対密度プロットを作成する。  
  島全体のペンギンの数の不平等の影響を受けないため、島全体の種類の分布を比較するのに便利。
```{r}
ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar(position = "fill")
```

### 3.プロットをファセットに分割して表示
- facet_wrap(~変数名): プロットをファセットに分割する。ファセットとは、データのサブセットのこと。
```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point(aes(color = species, shape = species)) + 
  facet_wrap(~island)
```
# 練習問題
### 1.mpgデータフレームの確認
```{r}
glimpse(mpg)
```

### 2.mpgデータフレームのhwyとdisplの散布図を作成
- displ: エンジン排気量
- hwy: 高速道路での燃費
- color = cty: 市街地の燃費（cty）に基づき、色を設定する。 
```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = cty)) + 
  geom_smooth(method = "lm")
```
- size = cty: 市街地の燃費（cty）に基づき、点のサイズを設定。
```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(size = cty)) + 
  geom_smooth(method = "lm")
```
- size = cty: 市街地の燃費（cty）に基づき、色と点のサイズを設定。
```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = cty, size = cty)) + 
  geom_smooth(method = "lm")
```

### 3.３番目の変数をlinewidthにマッピング
linewidthは線の太さを調整するためのもの。geom_point()では、エラーが出る。

### 4.同じ変数を複数のエステティックにマッピング
同じ変数から出る特徴を視覚的に強調することができる。

### 5.bill_depth_mmとbill_lengthの散布図を作成
くちばしの深さが増加すると長さが減少する傾向があり、全体としては負の相関が見られる。ただし、ファセットに分割すると正の相関がみられる。
```{r}
ggplot(penguins, aes(x = bill_depth_mm,
                     y = bill_length_mm,)) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") 
```

### 6.凡例の生成
凡例が2つ表示される理由は、ggplot() 内の aes() に同じ変数（species）を color と shape の両方にマッピングしているため。
```{r}
ggplot(penguins, aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species,
                     shape = species
  )
) +
 geom_point() +
 labs(color = "Species")
```
```{r}
ggplot(penguins, aes(x = bill_length_mm, 
                     y = bill_depth_mm)
) +
 geom_point(aes(color = species, shape = species)) +
 labs(color = "Species")
```

# 参考文献
- Rではじめるデータサイエンス  [Amazonで見る](https://www.amazon.co.jp/R%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-Hadley-Wickham/dp/487311814X)
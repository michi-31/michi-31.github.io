---
title: "1.データの可視化"
date: "2024-10-02"
execute: 
  error: true
  cache: true
format:
  html: 
    slide-level: 2
    toc: true
---
# 目的
ggplot2を用いてデータを可視化する。

### 必要なパッケージをロード
以下のパッケージをロードする。

- tidyverse（タイディーバース）: ggplot2やdplyrなどのデータ分析や可視化を行うためのパッケージ群の集合体
- palmerpenguins（パーマーペンギンズ）: 南極のパーマーランドの３つの島に生息するペンギンの身体の測定値に関するデータ（penguins）を提供するパッケージ
- ggthems（ジージーザムス）: 色覚以上に配慮したカラーパレットを提供するパッケージ
```{r}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```

### データフレームの確認
- glimpse(): データフレームの変数と先頭のいくつかのデータを確認する関数
```{r}
glimpse(penguins)
```

- View(): スクロールやフィルタリングができるインタラクティブなビュアーを表示する関数
```markdown
View(penguins)
```

# ggplot2の組み立て
ggplot2では、ggplot()関数を用いてプロットを始め、プロットオブジェクトを定義してから「レイヤ」を追加する。  

第１引数はデータセット、第２引数はmapping引数を定義する。  
なお、mapping引数は常にaes()関数で定義され、aes()にて軸の設定などを行う。
```markdown
ggplot(data = "データセット", mapping = aes(x = "変数名", y = "変数名"))
```

mapping引数が定義されていないため、空のキャンバスが表示される。
```{r}
ggplot(data = penguins) # 第１引数のみ定義された状態
```
mapping引数を定義して、aes()関数でｘ軸とｙ軸を指定する。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g) # 軸を指定
  )
```
レイヤに幾何学オブジェクトをプロットする関数
- geom_point(): 散布図
- geom_bar(): 棒グラフ
- geom_line(): 折れ線グラフ
- geom_boxplot(): 箱ひげ図

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, body_mass_g)
) + 
  geom_point() # 散布図を設定
```
- color = <変数名>: 変数に基づいて色分けを行う引数
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm,
                y = body_mass_g,
                color = species)  # ペンギンの種類ごとの色分けを設定
) +
 geom_point()
```

### ペンギンの種類ごとに直線を引く
散布図にレイヤを追加して体重とフリッパーの関係を示す直線を引く。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm,
                y = body_mass_g, 
                color = species) 
) +
 geom_point() + 
 geom_smooth(method = "lm") # "lm":linear-modelにフィットした線を描画するレイアを追加
```

### ラベルの改善
- shape = <変数名>: 変数に基づいて異なる形のマッピングを指定する引数  
- labs(): プロットラベルにタイトルなどを指定する関数
- scale_color_colorblind(): カラーパレットを色覚異常に対応する関数
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
 geom_point(mapping = aes(color = species, shape = species)) + # shape引数でペンギンの種類ごと異なる形を使用
 geom_smooth(method = "lm") +
 labs( # プロットラベルにタイトルなどを指定
  title = "Body mass and flipper length",
  subtitle = "Dimentions for Adelie, Chinstrap, and Gentoo Penguins",
  x = "Flipper length(mm)", y = "Body mass(g)",
  colort = "Species", shape = "Species"
 ) + 
 scale_color_colorblind() # カラーパレットを色覚異常に対応
```

# 練習問題
### 1.penguinsの行列数
glimpse()関数で344行、８列のデータセットであることを確認。
```{r}
glimpse(penguins)
```
### 2.bill_depth_mmの意味
??<データセット名>: データセットの内容を確認できる。  
bill_depth_mmは、「くちばしの深さ」を意味している。
```markdown
??penguins
```
### 3.散布図（bill_depth_mm vs bill_length_mm）
くちばしの深さが増加すると長さが減少する傾向が見られる。  
また、ペンギンの種類を色分けすると、種類で異なる傾向があることがわかる。  
```{r}
ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm)) +
  geom_point(aes(color = species, shape = species)) + 
  geom_smooth(method = "lm") + 
  labs(
    title = "Bill depth and Bill length",
    x = "Bill length(mm)", y = "Bill depth(mm)",
    color = "Species", shape = "Species"
  ) + 
  scale_color_colorblind()
```
### 4.箱ひげ図（species vs bill_depth_mm）
くちばしの深さの中央値は、ペンギンの種類ごとに異なる。  
Gentooは、AdelleとChinstrapに比べて短い傾向がある。
```{r}
ggplot(penguins, aes(x = species, y = bill_depth_mm)) +
  geom_boxplot() +  
  labs(title = "Species and Bill depth",
       x = "Species", y = "Bill depth(mm)")  
```
### 5.エラー修正
ggplot()の第２引数（mapping引数）が定義されていないため、エラーが発生する。
```markdown
ggplot(data = penguins) +  
 geom_point()
```
mapping引数を定義するよう修正し、散布図を表示する。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
  ) + 
 geom_point()
```
### 6.geom_point()のna.rm引数
- na.rm = TRUE: 欠損値を無視してプロットを生成する引数  

通常、欠損値（NA）があるとプロットに反映されず、エラーが発生するが、TRUEを指定（デフォルト値はFALSE）することで欠損値を無視してプロットを生成する。  

この場合、NAを含む行はプロットから除外されるため、残りのデータのみが描画される。
```{r}
ggplot(penguins, aes(x = flipper_length_mm,　　　　　　　　　　　 y = body_mass_g)) +
  geom_point(na.rm = TRUE)  # NAを無視してプロット
```
### 7.キャプションの追加
キャプションとは、画像やグラフ、表などのコンテンツに付けられる説明文やタイトルのこと。  
```{r}
ggplot(penguins, aes(x = flipper_length_mm,
　　　　　　　　　　　 y = body_mass_g)) +
  geom_point(na.rm = TRUE) + 
  labs( # キャプションの追加
    title = "データはpalmerpenguinsより。"
  )
```

### 8.散布図（設例の図）
- method = "loess": 散布図のデータに対して滑らかな曲線をフィットさせる引数
```{r}
ggplot(penguins, aes(x = flipper_length_mm,
                     y = body_mass_g)) + 
  geom_point(aes(color = bill_depth_mm)) + 
  geom_smooth(method = "loess")  # 滑らかな曲線をフィット
```

### 9.コードの出力予測
- se = FALSE: geom_smooth()関数内に定義することで、直線の信頼区間を描画せず、スムージング線のみを表示する引数

直線の信頼区間を描画しない場合、グラフがすっきりとして視覚的に簡潔になるが、モデルの不確実性に関する情報は失われる。
```{r}
ggplot(penguins, aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = island)) + 
  geom_point() + 
  geom_smooth(se = FALSE) # 直線の信頼区間を取り除く
```
### 10.実行結果の説明
２つのコードは、エステティックマッピングの定義域が異なるだけで、結果は同じになる。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) + 
  geom_point() + 
  geom_smooth()
```
```{r}
ggplot() +
  geom_point(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  ) + 
  geom_smooth(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)  
    )
```

# 3.ggplot2の呼び出し
ggplot2の最初の２つの引数はdataとmappingだが、これらの表記を省略して簡潔に書くことができる。
```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```
また、パイプ|>を用いると、以下のように書き直すことができる。
```{r}
penguins |>
 ggplot(aes(x = flipper_length_mm, y = body_mass_g)) + 
 geom_point()
```


# 4.分布の可視化
## 1.カテゴリ変数の表示
- geom_bar(): カテゴリ変数の分布を棒グラフで表示する関数
- fact_infreq(): 変数をファクタに変換する関数
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) + # ファクタに変換して度数に基づいて並び替える
  geom_bar()
```

### 2.ヒストグラム
- geom_histogram(): ヒストグラムを表示する関数
- binwidth: ヒストグラムの間隔の幅を設定する引数
```{r}
ggplot(penguins, aes(x = body_mass_g)) + 
  geom_histogram(binwidth = 200)
```
- geom_density(): ヒストグラムを平準化した密度プロットを表示する関数
```{r}
ggplot(penguins, aes(x = body_mass_g)) + 
  geom_density()
```

# 練習問題
## 1.speciesの棒グラフを作成
x = speciesの場合
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```
y = speciesの場合
```{r}
ggplot(penguins, aes(y = fct_infreq(species))) +
  geom_bar()
```

## 2.2つの棒グラフの違いを確認
- geom_bar(color = "red"): 棒グラフの縁取りを赤で表示する関数
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) + 
  geom_bar(color = "red")
```
- geom_bar(fill = "red"): 棒グラフの塗りつぶしを赤で表示する関数
```{r}
ggplot(penguins, aes(x = fct_infreq(species))) + 
  geom_bar(fill = "red")
```

### 3.geom_histogram()のbins引数の意味
- bins: ヒストグラムの間隔の幅を調整する引数

### 4.diamondsデータセットのcarat変数のヒストグラムを作成
binwidthでヒストグラムの幅を0.5に調整します。
```{r}
ggplot(diamonds, aes(x = carat)) + 
  geom_histogram(binwidth = 0.5)
```


# 5.関係の可視化
## 箱ひげ図でデータを可視化
```{r}
ggplot(penguins, aes(x = species, y = body_mass_g)) + 
  geom_boxplot() # 箱ひげ図を指定
```
```{r}
ggplot(penguins, aes(x = body_mass_g,
                     color = species)) + 
  geom_density(linewidth = 0.75) # 密度プロットを指定、linewidthで線の太さを調整
```
speciesをcolorとfillでエステティックにマッピングする。
また、alpha引数で色の透過性を追加する。
```{r}
ggplot(penguins, aes(x = body_mass_g,
                     color = species, # 種類に応じて線の色を指定
                     fill = species)) + # 種類に応じて塗りつぶしの色を指定
  geom_density(alpha = 0.5)
```

## 積み上げ図で変数間の関係を可視化
```{r}
ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar()
```
- position = "fill": 相対密度プロットを作成する引数  

島全体のペンギンの数の不平等の影響を排除するため、島全体の種類の分布を比較するのに便利。
```{r}
ggplot(penguins, aes(x = island, fill = species)) + 
  geom_bar(position = "fill") # 相対密度プロットを指定
```

### 3.プロットをファセットに分割して表示
- facet_wrap(~変数名): でプロットを特定の変数のファセット（サブセット）に分割する関数
```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point(aes(color = species, shape = species)) + 
  facet_wrap(~island) # islandのファセットに分割
```


# 練習問題
### 1.mpgデータフレームの確認
```{r}
glimpse(mpg)
```

### 2.mpgデータフレームのhwyとdisplの散布図
- データセットの補足
  - displ: エンジン排気量
  - hwy: 高速道路での燃費

color = ctyで市街地の燃費（cty）に基づき、色を設定する。
```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = cty)) + # 色を指定
  geom_smooth(method = "lm")
```
size = cty: 市街地の燃費（cty）に基づき、点のサイズを設定する引数
```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(size = cty)) + # 点のサイズを設定
  geom_smooth(method = "lm")
```
色と点のサイズの両方を設定する。
```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = cty, size = cty)) + # 色と天のサイズを指定
  geom_smooth(method = "lm") +
  labs(color = "Cty", shape = "Cty")
```

### 3.３番目の変数をlinewidthにマッピング
- inewidth: geom_line()やgeom_density()と組わせて線の太さを調整する引数
  
### 4.同じ変数を複数のエステティックにマッピング
同じ変数から出る特徴を視覚的に強調することができる。

### 5.bill_depth_mmとbill_lengthの散布図を作成
くちばしの深さが増加すると長さが減少する傾向があり、全体としては負の相関が見られる。  
ただし、ファセットに分割すると正の相関がみられる。
```{r}
ggplot(data = penguins,
       mapping =  aes(x = bill_depth_mm,y = bill_length_mm)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") 
  labs(color = "Species", shape = "Species")
```

### 6.凡例の生成
labs()関数内でcolor = "Species"のみ指定しているため、凡例が２つ表示される。
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = bill_length_mm, 
                y = bill_depth_mm,
                color = species,
                shape = species)
) +
 geom_point() +
 labs(color = "Species")
```
```{r}
ggplot(
  data = penguins,
  mapping = aes(x = bill_length_mm, 
                y = bill_depth_mm,
                color = species,
                shape = species)
) +
 geom_point() +
 labs(color = "Species", shape = "Species")
```
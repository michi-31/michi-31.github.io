{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "date: \"2024-09-27\"\n",
        "execute: \n",
        "  python: false\n",
        "  eval: false\n",
        "  cache: true\n",
        "format:\n",
        "  html: \n",
        "    slide-level: 2\n",
        "    toc: true\n",
        "---\n",
        "\n",
        "# 目的\n",
        "ここでは、GitHubの基本的な使い方を整理する。\n",
        "\n",
        "# 1.GitHubの概念と基本知識\n",
        "## GitHubとは？\n",
        "- GitHubとは、**Gitの仕組みを使ったWebサービス**のこと。\n",
        "- GitHubはLinuxカーネルのソースコード管理システムとして2005年に誕生した「Git」をWebサービス化したもの。\n",
        "- GitHubを使うことで、**ファイルのバージョン管理**を簡単に行うことができる！\n",
        "\n",
        "### バージョン管理とは？\n",
        "- **ファイルをアップデートするにつれてファイルの状態が状態が変化することを「バージョン」**といい、**同じファイルの複数のバージョンを保持することを「バージョン管理」**という。   \n",
        "- バージョン管理により、変更を記録した地点同士を自由に行き来することができる。 \n",
        "\n",
        "## ファイルの状態を記録（コミット）する\n",
        "- コミットとは、ユーザが任意のタイミングで記録を保存する操作のこと。\n",
        "- コミットのタイミングは、プログラムに対する機能追加や変更などの単位を目安とする。\n",
        "\n",
        "## コミットをリポジトリに保管する\n",
        "- リポジトリとは、コミットを貯める場所（保管庫）のこと。\n",
        "- Gitはフォルダ単位で管理するため、フォルダ内のすべてのファイルが管理対象となり、コミットすることでリポジトリに記録される。\n",
        "- リポジトリを用意する方法には大きく２つある。\n",
        "1. プロジェクトに途中参加する場合  \n",
        "   既存のリポジトリをコピー（クローン）して使う。\n",
        "2. 新規でプロジェクトを立ち上げる場合  \n",
        "   リポジトリを新規作成する。\n",
        "\n",
        "### ローカルリポジトリとリモートリポジトリの違い\n",
        "- ローカルリポジトリ\n",
        "  - PCのローカル環境に作成する自分専用のリポジトリのこと。\n",
        "  \n",
        "- リモートリポジトリ\n",
        "  - ネットワーク上に作成するリモートリポジトリのこと。\n",
        "  - 複数人で共有するものとしてサーバ上に配備することが一般的。\n",
        "  \n",
        "- （例）作業の流れ\n",
        "  - ローカルリポジトリで作業したものをリモートリポジトリに反映する。\n",
        "  - リモートリポジトリからローカルリポジトリにファイルを取得して作業する。\n",
        "\n",
        "## ３つの場所を使った管理の流れ\n",
        "1. ワークツリー（ワーキングツリー、作業ディレクトリ）\n",
        "2. ステージングエリア\n",
        "3. Gitディレクトリ\n",
        "\n",
        "### ワークツリーは変更するファイルを保持する場所\n",
        "Gitが保持している複数のコミットのうち、編集の開始地点となるもの。\n",
        "\n",
        "- Git管理外\n",
        "  - 新規追加したファイル：untracked（追跡なし）  \n",
        "  - 新規追加したファイルは、一度もコミットされていない状態のため、G管理対象外となる。 \n",
        "- Git管理内\n",
        "  - 編集したファイル：unmodified（変更なし）,  modified（変更済み）\n",
        "  \n",
        "### ステージングエリアはコミットするファイルを登録する場所\n",
        "ワークツリーでファイル編集を行ったあと、コミットする内容を一度登録する場所がステージングエリア。\n",
        "\n",
        "- ファイルの状態 \n",
        "  - modified→staged（ステージングエリアに追加済み）\n",
        "  - untracked→staged\n",
        "  \n",
        "### Gitディレクトリはコミットを格納する場所\n",
        "ステージングエリアに登録したファイルが、それ以降変更が入らないデータとして格納される先がGitディレクトリ。\n",
        "\n",
        "- ファイルの状態\n",
        "  - staged→（コミット）→unmodified\n",
        "\n",
        "## Gitは「Gitクライアント」と「Gitサーバ」を使って操作する\n",
        "- Gitクライアント\n",
        "  - PCにインストールして「ローカルリポジトリを作る」、「コミットする」、「リモートリポジトリへコミットを反映する」などのGit操作を行うもの。\n",
        "  - CUI（Character User Interface）クライアントとGUI（GGraphical User Interface）クライアントの２種類がある。\n",
        "- Gitサーバ\n",
        "  - リモートリポジトリを操作するソフトウェアのこと。\n",
        "\n",
        "# 2.Gitの準備\n",
        "\n",
        "## Gitのインストール\n",
        "以下のサイトを参考にGitHubをインストールする。  \n",
        "[GitHubの導入〜基本操作 for Windows](https://qiita.com/Kenta-Okuda/items/c3dcd60a80a82147e1bf)\n",
        "\n",
        "## CUIからコマンドを実行して操作する\n",
        "- （イメージ）＄ ls -a Documents  \n",
        "  - $：プロンプト\n",
        "  - -a：オプション\n",
        "  - Documents：パラメータ\n",
        "- ディレクトリの位置を表す「パス」\n",
        "  - 「.」：カレントディレクトリ\n",
        "  - 「_」：ホームディレクトリ\n",
        "  - 「/」：ルートディレクトリ\n",
        " \n",
        "- ディレクトリを操作するコマンド\n",
        "  - pwd：カレントディレクトリの絶対パス\n",
        "\n",
        "```{bash, eval: false}\n",
        "pwd\n",
        "```\n",
        "\n",
        "  - mkdir：新しいディレクトリを作る\n",
        "  - lsオプション：ディレクトリの内容を確認する\n",
        "  - 「-a」オプション：lsでは見れなかったディレクトリなどが表示される\n",
        "  - cd：カレントディレクトリを移動する\n",
        "\n",
        "## Gitの設定\n",
        "Windowsでは、Windows版Gitに属するCUIツール=GitBash（ギットバッシュ）を使って操作するのが便利！　※macOSでは、GitBashを使わなくてもターミナルで操作可能  \n",
        "\n",
        "- ユーザネームの設定\n",
        "  - $ git config --global user.name michi-31\n",
        "- メールアドレスの設定\n",
        "  - $ git config --global user.email=harada.9id@gmail.com\n",
        "- 設定値の一覧を確認\n",
        "  - $ git config --list \n",
        "\n",
        "## ローカルリポジトリでの操作\n",
        "\n",
        "- リモートリポジトリの作成\n",
        "  - git init：ローカルリポジトリの作成\n",
        "\n",
        "- コミットの作成\n",
        "  - git add：ステージングエリアに変更を登録\n",
        "    - git add ファイル名：特定のファイルをステージングエリアに登録\n",
        "    - git add .：すべてのファイルをステージングエリアに登録\n",
        "    - git add -u:意図的に削除したファイルをステージングエリアに登録する\n",
        "  - git commit：コミットを作成\n",
        "    - git commit -m \"コメント:-mオプションを付けると、コマンドラインから直接メッセージを指定できる\n",
        "  - git rm：ディレクトリ、ファイルの削除\n",
        "\n",
        "\n",
        "- 状態の確認 \n",
        "  - git status：ローカルリポジトリの状態を確認\n",
        "  - git diff：各エリアの差分を確認\n",
        "    - git diff --catched：ステージングエリアとGitディレクトリの差分を確認 \n",
        "  - git log：コミット履歴を確認\n",
        "\n",
        "-状態の復元 \n",
        "  - git checkout：ワークツリーの変更を取り消す\n",
        "    - git checkout -- ファイル名 \n",
        "  - git reset：ステージングエリアに追加した変更をワークツリーに戻す\n",
        "    - git reset HEAD ファイル名 \n",
        "  - git rm：ファイルを削除する\n",
        "    - git rm ファイル名\n",
        "\n",
        "## 補足「.mdファイル」とは？\n",
        "  - Markdown形式で 書かれたテキストファイルのこと。\n",
        "  - Markdown  \n",
        "  プレーンテキストで書かれた文書に簡単な書式設定を施す軽量マークアップ言語。HTMLやPDFへの変換が容易だが、機能は限定されている。\n",
        " - Quarto  \n",
        "  Mardownを基盤にしたツールでRやPythonなどのコードを埋め込み、実行結果を文書に反映することができる。\n",
        "\n",
        "\n",
        "# 参考文献\n",
        "\n",
        "- いちばんやさしいGit&GitHubの教本 第2版 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ  \n",
        "[Amazonでこの本を見る](https://www.amazon.co.jp/%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84Git-GitHub%E3%81%AE%E6%95%99%E6%9C%AC-%E7%AC%AC2%E7%89%88-%E4%BA%BA%E6%B0%97%E8%AC%9B%E5%B8%AB%E3%81%8C%E6%95%99%E3%81%88%E3%82%8B%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%EF%BC%86%E5%85%B1%E6%9C%89%E5%85%A5%E9%96%80-%E3%80%8C%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E6%95%99%E6%9C%AC%E3%80%8D%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B09X6MF3RW/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=IUVZJLLEGCT0&dib=eyJ2IjoiMSJ9.H7Z3QLgGeYPK3mvg9hzimLevSupcvgCysQp2ufr23VysC70a8TBswmJM69fMmlUfxEMIQ6km870p0C26a3pOnaVG53UArgbfUbyLspCNIwb3TKwL83sMrPz8bol5HeVrr5l3bpeOS591GphSIczKEAMKIaR3LZFS72C0bMB-6rynxmDnj1DIVyFeulKmM-Al87J-HkY5UbsFsdpDZoV0_cJKkMVRlf3MA7G-fGWx4MK7D5NGQB8XXm9sbbkW-SxL-EyuTts1OhFbGFPXUqmXfvqr2hLf_YA0v54acJuwixY.sx4EyUPlEnO7feBT3yskCSNnVUqJWDhq7n6f5n8EDnE&dib_tag=se&keywords=%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84git&qid=1727598481&sprefix=%E3%81%84%E3%81%A1%E3%81%B0%E3%82%93%E3%82%84%E3%81%95%E3%81%97%E3%81%84git%2Caps%2C260&sr=8-1)"
      ],
      "id": "b0b86ec6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}